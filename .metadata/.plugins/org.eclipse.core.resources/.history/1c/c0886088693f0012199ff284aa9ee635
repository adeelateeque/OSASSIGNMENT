package Control.SSTF;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.util.ArrayList;
import java.util.Scanner;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JPanel;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.ui.HorizontalAlignment;
import org.jfree.ui.RectangleEdge;
import org.jfree.ui.RefineryUtilities;

import View.DiskOptimizationApp;

import Control.Reader.Reader;


public class SSTF extends JFrame{
	Reader r;
	
	public int sstfValues[]= new int[18];
	ArrayList<Integer> values = new ArrayList<Integer>();
	
	public SSTF(int current,int rawSequence[],Reader r){
		this.r=r;
		int n=rawSequence.length;
		int sstf[]=new int[n];
		
		for(int i=0;i<n;i++)
		{
			sstf[i]=rawSequence[i];
		
		}
		int ii=-1;
		for(int i=0;i<n;i++)
		{
			int minimum=Integer.MAX_VALUE;
			ii=i;
			for(int j=i; j<n;j++)
			{
				int distance=Math.abs(current-sstf[j]);
				if(distance<minimum)
				{
					ii=j;
					minimum=distance;
				}
			}
			int tmp=sstf[i];
			sstf[i]=sstf[ii];
			sstf[ii]=tmp;
			
		}
		
	
		
		
		output(sstf);
		
		
		
		
	}
  
	public void output(int sortedSequence[] ){
		String sequence="";
		String working1="";
		String working2="";
		int total=0;
		int newSortedSequence[]=new int[sortedSequence.length+1];
		sequence+=r.getCurrent();
		int previous=r.getCurrent();
		
		for(int i=0; i<sortedSequence.length;i++)
		{
			int current=sortedSequence[i];
			sequence+=","+current;
			int d= Math.abs(previous-current);
			
			working1+="|"+previous+"-"+current+"|+";
			working2+=d+" + ";
			total+=d;
			previous=current;
		}
		
		Scanner sc = new Scanner(sequence);
		sc.useDelimiter(",");
		int first=sc.nextInt();
		newSortedSequence[0]=first;
	
		for(int i=0;i<sortedSequence.length;i++)
		{
			newSortedSequence[i+1]=sortedSequence[i];
		}
		
		
	    DiskOptimizationApp.getJTextArea().setText("Method\t: SSTF"+'\n'+"-----------------\n"+"Order of Access\t: "+sequence+"\n"+"Total Distance\t= "+working1.substring(0,working1.length()-1)+"\n"+"              \t= "+working2.substring(0,working2.length()-2)+"\n"+"              \t= "+total+'\n');
		System.out.println("Method\t: SSTF"+'\n'+"-----------------");
		System.out.println("Order of Access\t: "+sequence);
		System.out.println("Total Distance\t= "+working1.substring(0,working1.length()-1));
		System.out.println("              \t= "+working2.substring(0,working2.length()-2));
		System.out.println("              \t= "+total+'\n');
		
		
	}
	
	
}
